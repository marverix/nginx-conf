# Security-focused Nginx Configuration based on OWASP ASVS 4.0
# version 3
#
# > Verify that server configuration is hardened as per the recommendations of the application server
# > and frameworks in use.
# ~ 14.1.3
#
# Note: "REPLACE_*" added for easier automation
# 
# ISC License (ISC)
# Copyright 2021 marverix

user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
  worker_connections 768;
  # multi_accept on;
}

http {
  # Basic configuration

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;


  # Logging Settings

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;


  # Gzip Settings

  gzip on;
  # gzip_vary on;
  # gzip_proxied any;
  # gzip_comp_level 6;
  # gzip_buffers 16 8k;
  # gzip_http_version 1.1;
  # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;


  # Security

  # > Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information
  # > of system components.
  # ~ 14.3.3
  server_tokens off;

  # > Verify that a Content Security Policy (CSP) response header is in place that helps mitigate impact for
  # > XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities.
  # ~ 14.4.3
  # === https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
  add_header Content-Security-Policy "default-src 'self'";

  # > Verify that all responses contain a X-Content-Type-Options: nosniff header.
  # ~ 14.4.4
  # === https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
  add_header X-Content-Type-Options "nosniff";

  # > Verify that a Strict-Transport-Security header is included on all responses and for all subdomains,
  # > such as Strict-Transport-Security: max-age=15724800; includeSubdomains.
  # ~ 14.4.5
  # = If you  want to use Google's HSTS (https://hstspreload.org/) then use below instead
  # = add_header Strict-Transport-Security "max-age=15724800; includeSubdomains; preload"
  # === https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
  add_header Strict-Transport-Security "max-age=15724800; includeSubdomains";

  # > Verify that a suitable Referrer-Policy header is included to avoid exposing sensitive information
  # > in the URL through the Referer header to untrusted parties.
  # ~ 14.4.6
  # === https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
  add_header Referrer-Policy "strict-origin-when-cross-origin";

  # > Verify that the content of a web application cannot be embedded in a third-party site by default and that
  # > embedding of the exact resources is only allowed where necessary by using suitable
  # > Content-Security-Policy: frame-ancestors and X-Frame-Options response headers.
  # ~ 14.4.7
  # === https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
  add_header X-Frame-Options "SAMEORIGIN";

  # > The X-XSS-Protection header has been deprecated by modern browsers and its use can introduce additional security
  # > issues on the client side. As such, it is recommended to set the header as X-XSS-Protection: 0 in order to disable
  # > the XSS Auditor, and not allow it to take the default behavior of the browser handling the response.
  # === https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#x-xss-protection-header
  add_header X-XSS-Protection "0";

  # > The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types
  # > advertised in the Content-Type headers should not be changed and be followed. This is a way to opt out of MIME type
  # > sniffing, or, in other words, to say that the MIME types are deliberately configured.
  # === https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
  add_header X-Content-Type-Options "nosniff";


  # SSL/TLS

  # Note:
  # Here is a very cool tool from Mozilla, recommended by OWASP, to help with ciphers and generally SSL/TLS configuration:
  # https://ssl-config.mozilla.org

  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:10m;  # about 40000 sessions
  ssl_session_tickets off;

  # > Use Strong Diffie-Hellman Parameters
  # $ openssl dhparam 4096 -out /etc/ssl/dhparam.pem
  # === https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html#use-strong-diffie-hellman-parameters 
  ssl_dhparam /etc/ssl/dhparam.pem;

  # > Verify that old versions of SSL and TLS protocols, algorithms, ciphers, and configuration are disabled,
  # > such as SSLv2, SSLv3, or TLS 1.0 and TLS 1.1. The latest version of TLS should be the preferred cipher suite.
  # ~ 9.1.3
  ssl_protocols TLSv1.3 TLSv1.2;

  # > Verify using online or up to date TLS testing tools that only strong algorithms, ciphers, and protocols
  # > are enabled, with the strongest algorithms and ciphers set as preferred.
  # ~ 9.1.2
  # === https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

  # > Verify that secured TLS is used for all client connectivity, and does not fall back to insecure
  # > or unencrypted protocols.
  # ~ 9.1.1
  ssl_prefer_server_ciphers on;

  # > Verify that proper certification revocation, such as Online Certificate Status Protocol (OCSP) Stapling,
  # > is enabled and configured
  # ~ 9.2.4
  ssl_stapling on;
  ssl_stapling_verify on;

  # Verify chain of trust of OCSP response using Root CA and Intermediate certs
  # ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

  # Use resolver for OCSP
  # ( I'm using Quad9 )
  resolver 9.9.9.9 149.112.112.112 [2620:fe::fe] [2620:fe::9];


  # REPLACE_WITH_HTTP_CONF


  # Virtual Host Configs

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*;
}
